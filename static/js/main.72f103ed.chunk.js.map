{"version":3,"sources":["components/Login.js","hooks/useLocalStorage.js","contexts/ContactsProvider.js","contexts/SocketProvider.js","contexts/ConversationsProvider.js","components/Conversations.js","components/Contacts.js","components/NewContactModal.js","components/NewConversationModal.js","components/Sidebar.js","components/OpenConversation.js","components/Dashboard.js","components/App.js","index.js"],"names":["Login","onIdSubmit","idRef","useRef","Container","className","style","height","Form","onSubmit","e","preventDefault","current","value","Group","Label","Control","type","ref","required","Button","onClick","uuidv4","variant","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","contacts","setContacts","Provider","createContact","id","name","prevContacts","SocketContext","SocketProvider","socket","setSocket","newSocket","io","query","close","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","addMessageToConversation","useCallback","recipients","text","sender","prevConversations","madeChange","newMessage","newConversations","map","conversation","a","b","length","sort","every","element","index","messages","on","off","formattedConversations","recipient","contact","find","message","fromMe","senderName","selected","selectedConversation","sendMessage","emit","selectConversationIndex","createConversation","Conversations","ListGroup","Item","action","active","r","join","Contacts","NewContactModal","closeModal","nameRef","Modal","Header","closeButton","Body","NewConversationModal","selectedContactIds","setSelectedContactIds","controlled","Check","includes","label","onChange","contactId","prevSelectedContactIds","filter","prevId","CONVERSATIONS_KEY","CONTACTS_KEY","Sidebar","activeKey","setActiveKey","modalOpen","setModalOpen","conversationsOpen","width","Tab","onSelect","Nav","Link","eventKey","Content","Pane","show","onHide","OpenConversation","setText","setRef","node","scrollIntoView","smooth","lastMessage","InputGroup","as","target","resize","Append","Dashboard","App","setId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72f103ed.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport { Container, Form, Button } from \"react-bootstrap\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport default function Login({ onIdSubmit }) {\r\n  const idRef = useRef();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    onIdSubmit(idRef.current.value);\r\n  }\r\n\r\n  function createNewId() {\r\n    onIdSubmit(uuidv4());\r\n  }\r\n\r\n  return (\r\n    <Container\r\n      className=\"align-items-center d-flex\"\r\n      style={{ height: \"100vh\" }}\r\n    >\r\n      <Form onSubmit={handleSubmit} className=\"w-100\">\r\n        <Form.Group>\r\n          <Form.Label>Enter Your Id</Form.Label>\r\n          <Form.Control type=\"text\" ref={idRef} required></Form.Control>\r\n        </Form.Group>\r\n        <Button type=\"submit\" className=\"mr-2\">\r\n          Login\r\n        </Button>\r\n        <Button onClick={createNewId} variant=\"secondary\">\r\n          Create a new ID\r\n        </Button>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst PREFIX = \"whatsapp-clone-\";\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key;\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey);\r\n    if (jsonValue != null) return JSON.parse(jsonValue);\r\n    if (typeof initialValue === \"function\") {\r\n      return initialValue();\r\n    } else {\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\r\n  }, [value, setValue]);\r\n  return [value, setValue];\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\n\r\nconst ContactsContext = React.createContext();\r\n\r\nexport function useContacts() {\r\n  return useContext(ContactsContext);\r\n}\r\n\r\nexport function ContactsProvider({ children }) {\r\n  const [contacts, setContacts] = useLocalStorage(\"contacts\", []);\r\n\r\n  function createContact(id, name) {\r\n    setContacts((prevContacts) => {\r\n      return [...prevContacts, { id, name }];\r\n    });\r\n  }\r\n\r\n  return (\r\n    <ContactsContext.Provider value={{ contacts, createContact }}>\r\n      {children}\r\n    </ContactsContext.Provider>\r\n  );\r\n}\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport io from 'socket.io-client'\r\n\r\n\r\nconst SocketContext = React.createContext();\r\nexport function useSocket() {\r\n  return useContext(SocketContext);\r\n}\r\n\r\nexport function SocketProvider({ id, children }) {\r\n  const [socket, setSocket] = useState();\r\n\r\n  useEffect(() => {\r\n    const newSocket = io(\"http://localhost:5000\", { query: { id } });\r\n    setSocket(newSocket);\r\n\r\n    return () => newSocket.close();\r\n  }, [id]);\r\n\r\n  return (\r\n    <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>\r\n  );\r\n}\r\n","import React, { useContext, useState, useEffect, useCallback } from \"react\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport { useContacts } from \"./ContactsProvider\";\r\nimport { useSocket } from \"./SocketProvider\";\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport function useConversations() {\r\n  return useContext(ConversationsContext);\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n  const [conversations, setConversations] = useLocalStorage(\r\n    \"conversations\",\r\n    []\r\n  );\r\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\r\n  const { contacts } = useContacts();\r\n  const socket = useSocket();\r\n\r\n  function createConversation(recipients) {\r\n    setConversations((prevConversations) => {\r\n      return [...prevConversations, { recipients, messages: [] }];\r\n    });\r\n  }\r\n\r\n  const addMessageToConversation = useCallback(\r\n    ({ recipients, text, sender }) => {\r\n      setConversations((prevConversations) => {\r\n        let madeChange = false;\r\n        const newMessage = { sender, text };\r\n        const newConversations = prevConversations.map((conversation) => {\r\n          if (arrayEquality(conversation.recipients, recipients)) {\r\n            madeChange = true;\r\n            return {\r\n              ...conversation,\r\n              messages: [...conversation.messages, newMessage],\r\n            };\r\n          }\r\n\r\n          return conversation;\r\n        });\r\n\r\n        if (madeChange) {\r\n          return newConversations;\r\n        } else {\r\n          return [...prevConversations, { recipients, messages: [newMessage] }];\r\n        }\r\n      });\r\n    },\r\n    [setConversations]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return;\r\n\r\n    socket.on(\"receive-message\", addMessageToConversation);\r\n\r\n    return () => socket.off(\"receive-message\");\r\n  }, [socket, addMessageToConversation]);\r\n\r\n  function sendMessage(recipients, text) {\r\n    socket.emit(\"send-message\", { recipients, text });\r\n\r\n    addMessageToConversation({ recipients, text, sender: id });\r\n  }\r\n\r\n  const formattedConversations = conversations.map((conversation, index) => {\r\n    const recipients = conversation.recipients.map((recipient) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.id === recipient;\r\n      });\r\n      const name = (contact && contact.name) || recipient;\r\n      return { id: recipient, name };\r\n    });\r\n\r\n    const messages = conversation.messages.map((message) => {\r\n      const contact = contacts.find((contact) => {\r\n        return contact.id === message.sender;\r\n      });\r\n      const name = (contact && contact.name) || message.sender;\r\n      const fromMe = id === message.sender;\r\n      return { ...message, senderName: name, fromMe };\r\n    });\r\n\r\n    const selected = index === selectedConversationIndex;\r\n    return { ...conversation, messages, recipients, selected };\r\n  });\r\n\r\n  const value = {\r\n    conversations: formattedConversations,\r\n    selectedConversation: formattedConversations[selectedConversationIndex],\r\n    sendMessage,\r\n    selectConversationIndex: setSelectedConversationIndex,\r\n    createConversation,\r\n  };\r\n\r\n  return (\r\n    <ConversationsContext.Provider value={value}>\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n}\r\n\r\nfunction arrayEquality(a, b) {\r\n  if (a.length !== b.length) return false;\r\n\r\n  a.sort();\r\n  b.sort();\r\n\r\n  return a.every((element, index) => {\r\n    return element === b[index];\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\n\r\nexport default function Conversations() {\r\n  const { conversations, selectConversationIndex } = useConversations();\r\n\r\n  return (\r\n    <ListGroup variant=\"flush\">\r\n      {conversations.map((conversation, index) => (\r\n        <ListGroup.Item\r\n          key={index}\r\n          action\r\n          onClick={() => selectConversationIndex(index)}\r\n          active={conversation.selected}\r\n        >\r\n          {conversation.recipients.map((r) => r.name).join(\", \")}\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useContacts } from \"../contexts/ContactsProvider\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\n\r\nexport default function Contacts() {\r\n  const { contacts } = useContacts();\r\n\r\n  return (\r\n    <ListGroup variant=\"flush\">\r\n      {contacts.map(contact => (\r\n        <ListGroup.Item key={contact.id}>\r\n        {contact.name}\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  )\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { Modal, Form, Button } from \"react-bootstrap\";\r\nimport { useContacts } from \"../contexts/ContactsProvider\";\r\n\r\nexport default function NewContactModal({ closeModal }) {\r\n  const idRef = useRef();\r\n  const nameRef = useRef();\r\n  const { createContact } = useContacts();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    createContact(idRef.current.value, nameRef.current.value)\r\n    closeModal()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal.Header closeButton>Create Contact</Modal.Header>\r\n      <Modal.Body>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>ID</Form.Label>\r\n            <Form.Control type=\"text\" ref={idRef} required></Form.Control>\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control type=\"text\" ref={nameRef} required></Form.Control>\r\n          </Form.Group>\r\n          <Button type=\"submit\">Create</Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Modal, Form, Button } from \"react-bootstrap\";\r\nimport { useContacts } from \"../contexts/ContactsProvider\";\r\nimport { useConversations } from '../contexts/ConversationsProvider'\r\n\r\n\r\nexport default function NewConversationModal({ closeModal}) {\r\n  const [selectedContactIds, setSelectedContactIds] = useState([]);\r\n  const { contacts } = useContacts();\r\n  const { createConversation } = useConversations();\r\n\r\n function handleSubmit(e) {\r\n     e.preventDefault()\r\n\r\n     createConversation(selectedContactIds)\r\n     closeModal();\r\n }\r\n \r\n \r\n  function handleCheckboxChange(contactId) {\r\n    setSelectedContactIds((prevSelectedContactIds) => {\r\n      if (prevSelectedContactIds.includes(contactId)) {\r\n        return prevSelectedContactIds.filter((prevId) => {\r\n          return contactId !== prevId;\r\n        });\r\n      } else {\r\n        return [...prevSelectedContactIds, contactId];\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal.Header closeButton>Create Conversation</Modal.Header>\r\n      <Modal.Body>\r\n        <Form onSubmit={handleSubmit}>\r\n          {contacts.map((contact) => (\r\n            <Form.Group controlled={contact.id} key={contact.id}>\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                value={selectedContactIds.includes(contact.id)}\r\n                label={contact.name}\r\n                onChange={() => handleCheckboxChange(contact.id)}\r\n              />\r\n            </Form.Group>\r\n          ))}\r\n          <Button type=\"submit\">Create</Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Tab, Nav, Button, Modal } from \"react-bootstrap\";\r\nimport Conversations from \"./Conversations\";\r\nimport Contacts from \"./Contacts\";\r\nimport NewContactModal from \"./NewContactModal\";\r\nimport NewConversationModal from \"./NewConversationModal\";\r\n\r\nconst CONVERSATIONS_KEY = \"conversations\";\r\nconst CONTACTS_KEY = \"contacts\";\r\n\r\nexport default function Sidebar({ id }) {\r\n  const [activeKey, setActiveKey] = useState(CONVERSATIONS_KEY);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const conversationsOpen = activeKey === CONVERSATIONS_KEY;\r\n\r\n  function closeModal() {\r\n    setModalOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div style={{ width: \"250px\" }} className=\"d-flex flex-column\">\r\n      <Tab.Container activeKey={activeKey} onSelect={setActiveKey}>\r\n        <Nav variant=\"tabs\" className=\"justify-content-center\">\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={CONVERSATIONS_KEY}>Conversations</Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey={CONTACTS_KEY}>Contacts</Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n        <Tab.Content className=\"border-right overflow-auto flex-grow-1\">\r\n          <Tab.Pane eventKey={CONVERSATIONS_KEY}>\r\n            <Conversations />\r\n          </Tab.Pane>\r\n          <Tab.Pane eventKey={CONTACTS_KEY}>\r\n            <Contacts />\r\n          </Tab.Pane>\r\n        </Tab.Content>\r\n        <div className=\"p-2 border-top border-right small\">\r\n          Your: Id: <span className=\"text-muted\">{id}</span>\r\n        </div>\r\n        <Button onClick={() => setModalOpen(true)} className=\"rounded-0\">\r\n          New {conversationsOpen ? \"Conversation\" : \"Contact\"}\r\n        </Button>\r\n      </Tab.Container>\r\n      <Modal show={modalOpen} onHide={closeModal}>\r\n        {conversationsOpen ? (\r\n          <NewConversationModal closeModal={closeModal} />\r\n        ) : (\r\n          <NewContactModal closeModal={closeModal} />\r\n        )}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\n\r\nexport default function OpenConversation() {\r\n  const [text, setText] = useState(\"\");\r\n  const setRef = useCallback((node) => {\r\n    if (node) {\r\n      node.scrollIntoView({ smooth: true });\r\n    }\r\n  }, []);\r\n  const { sendMessage, selectedConversation } = useConversations();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    sendMessage(\r\n      selectedConversation.recipients.map((r) => r.id),\r\n      text\r\n    );\r\n    setText(\"\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column flex-grow-1\">\r\n      <div className=\"flex-grow-1 overflow-auto\">\r\n        <div className=\"d-flex flex-column align-items-start justify-content-end px-3\">\r\n          {selectedConversation.messages.map((message, index) => {\r\n            const lastMessage =\r\n              selectedConversation.messages.length - 1 === index;\r\n            return (\r\n              <div\r\n                ref={lastMessage ? setRef : null}\r\n                key={index}\r\n                className={`my-1 d-flex flex-column ${\r\n                  message.fromMe\r\n                    ? \"align-self-end align-items-end\"\r\n                    : \"align-items-start\"\r\n                }`}\r\n              >\r\n                <div\r\n                  className={`rounded px-2 py-1 ${\r\n                    message.fromMe ? \"bg-primary text-white\" : \"border\"\r\n                  }`}\r\n                >\r\n                  {message.text}\r\n                </div>\r\n                <div\r\n                  className={`text-muted small ${\r\n                    message.fromMe ? \"text-right\" : \"\"\r\n                  }`}\r\n                >\r\n                  {message.fromMe ? \"You\" : message.senderName}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group className=\"m-2\">\r\n          <InputGroup>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              required\r\n              value={text}\r\n              onChange={(e) => setText(e.target.value)}\r\n              style={{ height: \"75px\", resize: \"none\" }}\r\n            />\r\n            <InputGroup.Append>\r\n              <Button type=\"submit\">Send</Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n        </Form.Group>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport OpenConversation from \"./OpenConversation\";\r\nimport { useConversations } from \"../contexts/ConversationsProvider\";\r\n\r\nexport default function Dashboard({ id }) {\r\n  const { selectedConversation } = useConversations();\r\n\r\n  return (\r\n    <div className=\"d-flex\" style={{ height: \"100vh\" }}>\r\n      <Sidebar id={id} />\r\n      {selectedConversation && <OpenConversation />}\r\n    </div>\r\n  );\r\n}\r\n","import Login from \"./Login\";\nimport React from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport Dashboard from \"./Dashboard\";\nimport { ContactsProvider } from \"../contexts/ContactsProvider\";\nimport { ConversationsProvider } from \"../contexts/ConversationsProvider\";\nimport { SocketProvider } from '../contexts/SocketProvider'\n\n\nfunction App() {\n  const [id, setId] = useLocalStorage(\"id\");\n\n  const dashboard = (\n    <SocketProvider id={id}>\n      <ContactsProvider>\n        <ConversationsProvider id={id}>\n          <Dashboard id={id} />\n        </ConversationsProvider>\n      </ContactsProvider>\n    </SocketProvider>\n  );\n  return id ? dashboard : <Login onSubmit={setId} />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}